// Generated by gencpp from file roomabot/serviceCommand.msg
// DO NOT EDIT!


#ifndef ROOMABOT_MESSAGE_SERVICECOMMAND_H
#define ROOMABOT_MESSAGE_SERVICECOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roomabot
{
template <class ContainerAllocator>
struct serviceCommand_
{
  typedef serviceCommand_<ContainerAllocator> Type;

  serviceCommand_()
    : command()
    , arg1()
    , arg2()  {
    }
  serviceCommand_(const ContainerAllocator& _alloc)
    : command(_alloc)
    , arg1(_alloc)
    , arg2(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arg1_type;
  _arg1_type arg1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arg2_type;
  _arg2_type arg2;





  typedef boost::shared_ptr< ::roomabot::serviceCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roomabot::serviceCommand_<ContainerAllocator> const> ConstPtr;

}; // struct serviceCommand_

typedef ::roomabot::serviceCommand_<std::allocator<void> > serviceCommand;

typedef boost::shared_ptr< ::roomabot::serviceCommand > serviceCommandPtr;
typedef boost::shared_ptr< ::roomabot::serviceCommand const> serviceCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roomabot::serviceCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roomabot::serviceCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roomabot::serviceCommand_<ContainerAllocator1> & lhs, const ::roomabot::serviceCommand_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.arg1 == rhs.arg1 &&
    lhs.arg2 == rhs.arg2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roomabot::serviceCommand_<ContainerAllocator1> & lhs, const ::roomabot::serviceCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roomabot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roomabot::serviceCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roomabot::serviceCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roomabot::serviceCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roomabot::serviceCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roomabot::serviceCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roomabot::serviceCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roomabot::serviceCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7addab281efdf18482237e77c6129c86";
  }

  static const char* value(const ::roomabot::serviceCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7addab281efdf184ULL;
  static const uint64_t static_value2 = 0x82237e77c6129c86ULL;
};

template<class ContainerAllocator>
struct DataType< ::roomabot::serviceCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roomabot/serviceCommand";
  }

  static const char* value(const ::roomabot::serviceCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roomabot::serviceCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string command\n"
"string arg1\n"
"string arg2\n"
;
  }

  static const char* value(const ::roomabot::serviceCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roomabot::serviceCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.arg1);
      stream.next(m.arg2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct serviceCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roomabot::serviceCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roomabot::serviceCommand_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "arg1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arg1);
    s << indent << "arg2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arg2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROOMABOT_MESSAGE_SERVICECOMMAND_H
